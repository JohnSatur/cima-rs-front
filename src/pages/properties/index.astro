---
import PropertyCard from "@/components/ui/PropertyCard.astro";
import PropertyFilters from "@/components/ui/PropertyFilters.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import type { Pagination, PropertyResponse } from "@/types/api.interface";

// Obtener todos los parámetros de la URL
const searchParams = Astro.url.searchParams;
const page = Number(searchParams.get('page')) || 1;
const limit = Number(searchParams.get('limit')) || 10;

// Construir la URL con todos los parámetros de filtro
const apiUrl = new URL('http://localhost:3000/api/v1/properties');
apiUrl.searchParams.set('page', page.toString());
apiUrl.searchParams.set('limit', limit.toString());

// Añadir parámetros de filtro si existen
const filterParams = [
  'city',
  'minPrice',
  'maxPrice',
  'minLandArea',
  'maxLandArea',
  'minConstructionArea',
  'maxConstructionArea',
  'dealType'
];

filterParams.forEach(param => {
  const value = searchParams.get(param);
  if (value) {
    apiUrl.searchParams.set(param, value);
  }
});

// Hacer la petición al backend con los filtros
const response = await fetch(apiUrl.toString());
const data = await response.json();

const { properties, pagination }:{ properties: PropertyResponse[], pagination: Pagination } = data;
---

<MainLayout title="Propiedades">
  <main class="max-w-7xl mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row gap-8">
      <div class="md:w-1/4">
        <PropertyFilters />
      </div>

      <!-- Listado de propiedades -->
      <div class="md:w-3/4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {properties.map((property: PropertyResponse) => (
            <PropertyCard data={property.data} currency="MXN" />
          ))}
        </div>

        <!-- Paginación -->
        <div class="mt-8 flex justify-center">
          <nav class="inline-flex rounded-md shadow">
            <a
              href={`/properties?${new URLSearchParams({
                ...Object.fromEntries(searchParams),
                page: (pagination.page - 1).toString(),
                limit: pagination.limit.toString()
              })}`}
              class={`px-4 py-2 rounded-l-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 ${
                pagination.page === 1 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              aria-disabled={pagination.page === 1}
            >
              Anterior
            </a>
            
            {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map(
              (pageNum) => (
                <a
                  href={`/properties?${new URLSearchParams({
                    ...Object.fromEntries(searchParams),
                    page: pageNum.toString(),
                    limit: pagination.limit.toString()
                  })}`}
                  class={`px-4 py-2 border-t border-b border-gray-300 bg-white hover:bg-gray-50 ${
                    pageNum === pagination.page
                      ? 'text-brand font-bold'
                      : 'text-gray-700'
                  }`}
                >
                  {pageNum}
                </a>
              )
            )}

            <a
              href={`/properties?${new URLSearchParams({
                ...Object.fromEntries(searchParams),
                page: (pagination.page + 1).toString(),
                limit: pagination.limit.toString()
              })}`}
              class={`px-4 py-2 rounded-r-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 ${
                pagination.page === pagination.totalPages
                  ? 'opacity-50 cursor-not-allowed'
                  : ''
              }`}
              aria-disabled={pagination.page === pagination.totalPages}
            >
              Siguiente
            </a>
          </nav>
        </div>
      </div>
    </div>
  </main>
  <!-- <ConstructionForm /> -->
</MainLayout>
