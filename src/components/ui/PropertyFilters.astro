---
interface Props {
  cities?: string[];
  minPrice?: number;
  maxPrice?: number;
  minLandArea?: number;
  maxLandArea?: number;
  minConstructionArea?: number;
  maxConstructionArea?: number;
}

const {
  cities = ['Xalapa', 'Puebla', 'Veracruz', 'Guadalajara'],
  minPrice = 1000000,
  maxPrice = 17000000,
  minLandArea = 100,
  maxLandArea = 1000,
  minConstructionArea = 100,
  maxConstructionArea = 1000
} = Astro.props;

// Obtener los valores actuales de la URL
const currentUrl = new URL(Astro.url);
const currentCity = currentUrl.searchParams.get('city') || '';
const currentMinPrice = currentUrl.searchParams.get('minPrice') || minPrice.toString();
const currentMaxPrice = currentUrl.searchParams.get('maxPrice') || maxPrice.toString();
const currentMinLandArea = currentUrl.searchParams.get('minLandArea') || minLandArea.toString();
const currentMaxLandArea = currentUrl.searchParams.get('maxLandArea') || maxLandArea.toString();
const currentMinConstructionArea = currentUrl.searchParams.get('minConstructionArea') || minConstructionArea.toString();
const currentMaxConstructionArea = currentUrl.searchParams.get('maxConstructionArea') || maxConstructionArea.toString();
const currentDealType = currentUrl.searchParams.get('dealType') || '';

// Definir los steps para cada rango
const priceStep = 100000;
const landStep = 10;
const constructionStep = 10;
---

<div class="bg-white p-6 rounded-lg shadow-md">
  <h2 class="text-xl font-semibold mb-4 text-gray-800">Filtros</h2>
  <form method="GET" action="/properties">
    <!-- Ciudad -->
    <div class="mb-4">
      <label
        for="city"
        class="block text-sm font-medium text-gray-700 mb-2"
        >Ciudad</label
      >
      <select
        id="city"
        name="city"
        class="w-full p-2 border rounded focus:ring-2 focus:ring-brand focus:border-brand"
      >
        <option value="">Todas las ciudades</option>
        {cities.map((city) => (
          <option value={city} selected={city === currentCity}>{city}</option>
        ))}
      </select>
    </div>

    <!-- Precio (Range) -->
    <div class="mb-4">
      <label
        for="price"
        class="block text-sm font-medium text-gray-700 mb-2"
        >Precio</label
      >
      <input
        type="range"
        id="price"
        name="minPrice"
        min={minPrice}
        max={maxPrice}
        value={currentMinPrice}
        step={priceStep}
        class="w-full h-2 bg-brand-100 rounded-lg appearance-none cursor-pointer"
        data-range="price"
      />
      <div class="flex justify-between text-sm text-gray-600">
        <span id="price-min">${Number(currentMinPrice).toLocaleString()}</span>
        <span id="price-max">${Number(currentMaxPrice).toLocaleString()}</span>
      </div>
    </div>

    <!-- M² de terreno (Range) -->
    <div class="mb-4">
      <label
        for="land-area"
        class="block text-sm font-medium text-gray-700 mb-2"
        >M² de terreno</label
      >
      <input
        type="range"
        id="land-area"
        name="minLandArea"
        min={minLandArea}
        max={maxLandArea}
        value={currentMinLandArea}
        step={landStep}
        class="w-full h-2 bg-brand-100 rounded-lg appearance-none cursor-pointer"
        data-range="land"
      />
      <div class="flex justify-between text-sm text-gray-600">
        <span id="land-min">{currentMinLandArea} m²</span>
        <span id="land-max">{currentMaxLandArea} m²</span>
      </div>
    </div>

    <!-- M² de construcción (Range) -->
    <div class="mb-4">
      <label
        for="construction-area"
        class="block text-sm font-medium text-gray-700 mb-2"
        >M² de construcción</label
      >
      <input
        type="range"
        id="construction-area"
        name="minConstructionArea"
        min={minConstructionArea}
        max={maxConstructionArea}
        value={currentMinConstructionArea}
        step={constructionStep}
        class="w-full h-2 bg-brand-100 rounded-lg appearance-none cursor-pointer"
        data-range="construction"
      />
      <div class="flex justify-between text-sm text-gray-600">
        <span id="construction-min">{currentMinConstructionArea} m²</span>
        <span id="construction-max">{currentMaxConstructionArea} m²</span>
      </div>
    </div>

    <!-- Tipo de trato (Venta o Renta) -->
    <div class="mb-4">
      <label class="block text-sm font-medium text-gray-700 mb-2"
        >Tipo de trato</label
      >
      <div class="flex gap-4">
        <label class="flex items-center">
          <input
            type="radio"
            name="dealType"
            value="venta"
            class="form-radio text-brand focus:ring-brand"
            checked={currentDealType === 'venta'}
          />
          <span class="ml-2">Venta</span>
        </label>
        <label class="flex items-center">
          <input
            type="radio"
            name="dealType"
            value="renta"
            class="form-radio text-brand focus:ring-brand"
            checked={currentDealType === 'renta'}
          />
          <span class="ml-2">Renta</span>
        </label>
      </div>
    </div>

    <!-- Botón de aplicar filtros -->
    <button
      type="submit"
      class="w-full bg-brand text-white px-4 py-2 rounded hover:bg-brand-600 transition duration-300"
    >
      Aplicar filtros
    </button>
  </form>
</div>

<script>
  // Función para formatear números con separadores de miles
  const formatNumber = (num: number) => {
    return num.toLocaleString();
  };

  // Función para actualizar los valores de los rangos
  const updateRangeValues = (range: HTMLInputElement) => {
    const rangeType = range.dataset.range;
    if (!rangeType) return;

    const value = Number(range.value);
    const minSpan = document.getElementById(`${rangeType}-min`);
    const maxSpan = document.getElementById(`${rangeType}-max`);

    if (minSpan && maxSpan) {
      if (rangeType === 'price') {
        minSpan.textContent = `$${formatNumber(value)}`;
        maxSpan.textContent = `$${formatNumber(Number(range.max))}`;
      } else {
        minSpan.textContent = `${value} m²`;
        maxSpan.textContent = `${range.max} m²`;
      }
    }
  };

  // Agregar event listeners a todos los inputs de tipo range
  document.querySelectorAll('input[type="range"]').forEach(range => {
    range.addEventListener('input', (e) => {
      updateRangeValues(e.target as HTMLInputElement);
    });
  });
</script>
